services:
  budget-mcp-server:
    build: .
    image: budget-mcp-server:latest
    container_name: budget-mcp-server-stdio
    command: >
      bash -c "uv run python3 run_stdio.py"
    environment:
      - APP_ENV=production
      - DATABASE_FILE=/app/data/budget_app.duckdb
      - DATABASE_MODE=hybrid
      - MOTHERDUCK_TOKEN=${MOTHERDUCK_TOKEN}
      - MOTHERDUCK_DATABASE=budget_app
      - MOTHERDUCK_SYNC_ON_START=false
    volumes:
      - budget_data:/app/data
    restart: unless-stopped
    networks:
      - default

    # Configure stdin/stdout for MCP server communication
    stdin_open: true
    tty: true

    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  budget-mcp-server-dev:
    build: .
    image: budget-mcp-server:dev
    container_name: budget-mcp-server-dev-stdio
    profiles:
      - dev
    command: >
      bash -c "uv run python3 run_stdio.py"
    environment:
      - APP_ENV=development
      - DATABASE_FILE=./data/budget_app.duckdb
      - DATABASE_MODE=hybrid
      - MOTHERDUCK_TOKEN=${MOTHERDUCK_TOKEN}
      - MOTHERDUCK_DATABASE=budget_app
      - MOTHERDUCK_SYNC_ON_START=false
    volumes:
      - budget_data:/app/data
      - .:/app
    restart: unless-stopped
    networks:
      - default

    # Configure stdin/stdout for MCP server communication
    stdin_open: true
    tty: true

    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  nginx-proxy:
    image: nginx:latest
    container_name: nginx-proxy
    profiles:
      - prod-http
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Mount the Nginx configuration template and process it
      - ./nginx/nginx.conf.template:/etc/nginx/templates/default.conf.template:ro
      # Mount the SSL certificates
      - ./certs:/etc/ssl/certs:ro
    environment:
      - UPSTREAM_HOST=budget-mcp-server-http
      - SERVER_NAME=localhost
    depends_on:
      - budget-mcp-server-http
    restart: unless-stopped
    networks:
      - default

  nginx-proxy-dev:
    image: nginx:latest
    container_name: nginx-proxy-dev
    profiles:
      - dev-http
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Mount the Nginx configuration template and process it
      - ./nginx/nginx.conf.template:/etc/nginx/templates/default.conf.template:ro
      # Mount the SSL certificates
      - ./certs:/etc/ssl/certs:ro
    environment:
      - UPSTREAM_HOST=budget-mcp-server-dev-http
      - SERVER_NAME=localhost
    depends_on:
      - budget-mcp-server-dev-http
    restart: unless-stopped
    networks:
      - default

  budget-mcp-server-http:
    build: .
    image: budget-mcp-server:latest
    container_name: budget-mcp-server-http
    profiles:
      - prod-http
    command: >
      bash -c "uv run python3 run.py"
    environment:
      - APP_ENV=production
      - DATABASE_FILE=/app/data/budget_app.duckdb
      - DATABASE_MODE=local
      - MOTHERDUCK_TOKEN=${MOTHERDUCK_TOKEN}
      - MOTHERDUCK_DATABASE=budget_app
      - HOST=0.0.0.0
      - PORT=8000
      - MCP_PATH=/mcp
      - HTTPS_ENABLED=false
      - BEARER_TOKEN=${BEARER_TOKEN}
    ports:
      - "8000:8000"  # HTTP port, nginx will take care of HTTPS
    volumes:
      - budget_data:/app/data
    restart: unless-stopped
    networks:
      - default

  budget-mcp-server-dev-http:
    build: .
    image: budget-mcp-server:dev
    container_name: budget-mcp-server-dev-http
    profiles:
      - dev-http
    command: >
      bash -c "uv run python3 run.py"
    environment:
      - APP_ENV=development
      - DATABASE_FILE=/app/data/budget_app.duckdb
      - DATABASE_MODE=hybrid
      - MOTHERDUCK_TOKEN=${MOTHERDUCK_TOKEN}
      - MOTHERDUCK_DATABASE=budget_app
      - HOST=0.0.0.0
      - PORT=8000
      - MCP_PATH=/mcp
      - HTTPS_ENABLED=false
      - SSL_KEY_FILE=/app/certs/server.key
      - BEARER_TOKEN=${BEARER_TOKEN}
    ports:
      - "8000:8000"  # HTTP port
    volumes:
      - budget_data:/app/data
      - .:/app
    restart: unless-stopped
    networks:
      - default

volumes:
  budget_data:

networks:
  default:
    name: budget-mcp-server_default
